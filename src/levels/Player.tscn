[gd_scene load_steps=4 format=3 uid="uid://kd88rjy0kg8j"]

[ext_resource type="Texture2D" uid="uid://b4pegrn318rvo" path="res://src/temp_char.bmp" id="1_gga1i"]

[sub_resource type="GDScript" id="GDScript_kpjcp"]
script/source = "extends CharacterBody2D

var history = []
const HISTORY_MAX_LENGTH = 300

var history_index = -1

const maxSpeed := 300
const accel := 375
const friction := 500
const gravity := 300
const jumpForce := 150
const fallMultiplier := 2.5
var input = Vector2.ZERO
var current_scale = Vector2.ONE

var is_recording = false

func _ready():
	set_process_input(true)
	current_scale = $Sprite2D.scale

func _input(event):
	if event is InputEventKey and event.pressed:
		if event.keycode == KEY_R:
			is_recording = !is_recording
			if is_recording:
				history.clear()
				history_index = -1
				print(\"Recording started\")
			else:
				print(\"Recording stopped\")
		elif event.keycode == KEY_SPACE:
			history_index = -1
			print(\"Live control regained\")
	if event is InputEventMouseButton and event.pressed:
		if event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			step_rewind()
		elif event.button_index == MOUSE_BUTTON_WHEEL_UP:
			step_fast_forward()
func apply_history_state(index: int):
	var state = history[index]
	var tween1 = create_tween()
	tween1.tween_property(self, \"position\", state.position,0.2)
	tween1.tween_property(self, \"velocity\", state.velocity,0.2)


func step_rewind():
	if history.size() == 0:
		return
	if history_index == -1:
		history_index = history.size() - 1
	else:
		history_index = max(0, history_index - 1)
	apply_history_state(history_index)

func step_fast_forward():
	if history.size() == 0 or history_index == -1:
		return
	history_index = min(history.size() - 1, history_index + 1)
	apply_history_state(history_index)
	
func change_scale(amount: float):
	var min_scale = 0.5
	var max_scale = 2.0
	var new_scale_value = clamp(current_scale.x + amount, min_scale, max_scale)
	current_scale = Vector2(new_scale_value, new_scale_value)
	scaleCharacter(current_scale, 0.1)

func scaleCharacter(tscale: Vector2, duration: float):
	var tween = create_tween()
	tween.tween_property($Sprite2D, \"scale\", tscale, duration)

func _physics_process(delta):
	if history_index == -1:
		if is_recording:
			history.append({
				\"position\": position,
				\"velocity\": velocity
			})
			if history.size() > HISTORY_MAX_LENGTH:
				history.pop_front()
		playerMovement(delta)
		move_and_slide()
	else:
		velocity = Vector2.ZERO

func getInput():
	input.x = int(Input.is_action_pressed(\"ui_right\")) - int(Input.is_action_pressed(\"ui_left\"))
	return input.normalized()

func playerMovement(delta):
	if not is_on_floor():
		if velocity.y > 0:
			velocity.y += gravity * fallMultiplier * delta
		else:
			velocity.y += gravity * delta
	if Input.is_action_just_pressed(\"ui_up\") and is_on_floor():
		velocity.y += -jumpForce
	input = getInput()
	if input.x == 0:
		if abs(velocity.x) > friction * delta:
			velocity.x -= sign(velocity.x) * friction * delta
		else:
			velocity.x = 0
	else:
		velocity.x += input.x * accel * delta
		velocity.x = clamp(velocity.x, -maxSpeed, maxSpeed)
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_e80uo"]

[node name="Player" type="CharacterBody2D"]
script = SubResource("GDScript_kpjcp")
metadata/_edit_horizontal_guides_ = [-64.0]

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CapsuleShape2D_e80uo")

[node name="Camera2D" type="Camera2D" parent="."]
zoom = Vector2(2, 2)

[node name="Sprite2D" type="Sprite2D" parent="."]
texture_filter = 1
position = Vector2(-5.96046e-07, -0.5)
scale = Vector2(1.25, 1.6875)
texture = ExtResource("1_gga1i")

[connection signal="tree_entered" from="." to="." method="_on_tree_entered"]
[connection signal="tree_exiting" from="." to="." method="_on_tree_exiting"]
